name: pr

on:
#   release:
#     types: [published]
  pull_request:
    types: [merge,opened]
    
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the build version"
        required: true
        default: "version"
        

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
  
    - name: Checkout code
      uses: actions/checkout@master
      with:
        ref: "${{github.event.inputs.version}}"
    
    - name: Show Popularity
#       if: github.event_name
      id: popular
      run: |
        set -exv
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        GIT_TAGS=$(git tag -l --sort=committerdate)  
        TAGS=($GIT_TAGS)
        echo "${{ toJson(github.sha) }}"
        export COMMIT=rc-${TAGS[0]}-$(jq --raw-output .head_commit.id "${{ github }}" | cut -c1-7)
        export GHASH=$(echo ${{ toJson(github.sha) }} | cut -c1-7)
        echo "Below is the grabbed hash"
        echo $GHASH
        echo "BELOW is the commit"
        echo $COMMIT
        echo "******************************"
        echo "The github context is:"
        echo "${{ toJson(github) }}"
        echo ""
        echo "The job context is:"
        echo "${{ toJson(job) }}"
        echo ""
        echo "The steps context is:"
        echo "${{ toJson(steps) }}"
        echo ""
        echo "The runner context is:"
        echo "${{ toJson(runner) }}"
        echo ""
        echo "The strategy context is:"
        echo "${{ toJson(strategy) }}"
        echo ""
        echo "The matrix context is:"
        echo "${{ toJson(matrix) }}"
        ls -larh
        ls -larh .github/workflows/

#   exitis:
#     if: "!github.event.release.prerelease"
#     runs-on: [ubuntu-latest]
#     steps:
#       - name: step1 
#         run: |
#           echo "chill pill"
          
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         path: main
        
#     - name: get tag
#       run: |
#         set -exv
#         export GG="${GITHUB_REF/refs\/tags\/}"
#         echo $GG
        
#     - uses: actions/checkout@v2
#       with:
#         repository: iamtito/bvify
#         path: 'bvify'

#     - name: Deploy
#       run: |
#         set -exv
#         export GITHUB_TAG="${GITHUB_REF/refs\/tags\/}"
#         echo $GITHUB_TAG
        
#   ploy:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         path: main
#     - name: get tag
#       run: |
#         set -exv
#         export GG="${GITHUB_REF/refs\/tags\/}"
#         echo $GG
        
#   loy:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         repository: iamtito/bvify
#         path: 'bvify'

#     - name: Deploy
#       run: |
#         set -exv
#         export GITHUB_TAG="${GITHUB_REF/refs\/tags\/}"
#         echo $GITHUB_TAG
        
#   broadcasr_freq:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: gliech/create-github-secret-action@v1
#         continue-on-error: true
#         with:
#           location: iamtito/react-app
#           name: BROADCAST_FREQUENCY
#           value: '1.2.3'
#           pa_token: ${{ secrets.GIT_TOKEN }}
          
#       - run: echo "${{ secrets.THE_VERSION }} - ${{ secrets.BROADCAST_FREQUENCY }}"
        
#   broadcast:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: gliech/create-github-secret-action@v1
#         continue-on-error: true
#         with:
#           location: iamtito/react-app
#           name: BROADCAST
#           value: ${GITHUB_REF/refs\/tags\/}
#           pa_token: ${{ secrets.GIT_TOKEN }}
          
#       - run: echo "${{ secrets.THE_VERSIONN }} - ${{ secrets.BROADCAST }} - ${GITHUB_REF/refs\/tags\/}"
        
#   broad:
#     runs-on: ubuntu-latest
#     outputs:
#       githash: ${{ steps.githash.outputs.githash }}
#     steps:
#       - name: set githash
#         id: githash
#         run: |
#           set -exv
#           if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
#             export version="${{ github.event.inputs.version }}"
#           else
#             export version="${GITHUB_REF/refs\/tags\/}"
#           fi
#           echo "${version}"
#           echo "::set-output name=githash::$(echo "${version}")"
        
#       - name: show it
#         run: |
#           set -exv
#           echo "${version}"
#           echo "${{ steps.githash.outputs.githash }}"
        
#       - uses: gliech/create-github-secret-action@v1
#         continue-on-error: true
#         with:
#           location: iamtito/react-app
#           name: BROAD
#           value: "${{ steps.githash.outputs.githash }}"
#           pa_token: ${{ secrets.GIT_TOKEN }}

#       - run: echo "${{ secrets.VERSIONN }} - ${{ secrets.BROAD }} - ${{ steps.githash.outputs.githash }}"

#   broad_building:
#     needs: [broad]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: build
#         run: |
#           set -exv
#           echo "${{ secrets.BROAD }}"
#           mkdir ${{ secrets.BROAD }}
#           docker build -t tbola45:${{ secrets.BROAD }} -f Dockerfile.dev .
#           docker images
          
#   broadcast_building:
#     needs: [broadcast]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: build
#         run: |
#           set -exv
#           docker build -t tbola45:${{ secrets.BROADCAST }} -f Dockerfile.dev .
#           docker images

#   broadcasr_freq_build:
#     needs: [broadcasr_freq]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: build
#         run: |
#           set -exv
#           docker build -t tbola45:${{ secrets.BROADCAST_FREQUENCY }} -f Dockerfile.dev .
#           docker images
