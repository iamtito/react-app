name: Crons

on:
  label: 
    types: [created]
#   release: 
#     types: [published]

#   push:
#     branches: master

  schedule:
    - cron: "*/2 * * * *"
    - cron: "*/5 * * * *"

jobs:
  build_now:
    # Job name is Greeting
    name: Greeting
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Inspect contexts
        run: |
          echo "The github context is:"
          echo "${{ toJson(github) }}"
          echo ""
          echo "The job context is:"
          echo "${{ toJson(job) }}"
          
      - name: Inspect contexts
        if: github.event.schedule == '*/5 * * * *'
        run: |
          echo "this is the 5"
          
      - name: Inspect contexts
        if: github.event.schedule == '*/2 * * * *'
        run: |
          echo "this is the 2"
          
      # This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action
      - name: Hello world
        uses: actions/hello-world-javascript-action@v1
        with:
          who-to-greet: 'Mona the Octocat'
        id: hello
      # This step prints an output (time) from the previous step's action.
      - name: Echo the greeting's time
        run: echo 'The time was ${{ steps.hello.outputs.time }}.'
      - name: Echo the all
        run: echo 'The time was ${{ steps.hello.outputs }}.'
   
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Print a greeting
      env:
        MY_VAR: Hi there! My name is yobo 
        FIRST_NAME: Mona
        MIDDLE_NAME: The
        LAST_NAME: Octoc
      run: |
        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.
        pwd
        ansible -m shell -a 'sudo service httpd start' all
        ansible -m shell -a 'sudo service httpd status' all
        ansible -m shell -a 'sudo httpd -V' all
        echo GITHUB_REF=${GITHUB_REF}
        echo EXTRACT_GITHUB_REF=${GITHUB_REF##*/}
        echo EXTRACT_GITHUB_REF_HEADS=$(echo ${GITHUB_REF#refs/heads/})
        
    
    - name: Show Popularity
      run: |
        STARS=$(jq --raw-output .repository.stargazers "${{ github.event_path }}")
        FORKS=$(jq --raw-output .repository.forks "${{ github.event_path }}")
        Branch=$(jq --raw-output .repository.default_branch "${{ github.event_path }}")
        echo "${{ github.repository }} has $STARS stars and $FORKS forks on $Branch branch"
        
    - name: Using Payload To Run a step
      if: github.event_name == 'release'
      run: |
        NAME=$(jq --raw-output .release.name "${{ github.event_path }}")
        DETAIL=$(jq --raw-output .release.body "${{ github.event_path }}")
        echo "$NAME and the $DETAIL was entered"
        
    - name: GitAction Label Payload
      if: github.event_name == 'label'
      run: |
        NAME=$(jq --raw-output .label.name "${{ github.event_path }}")
        DEPLOY_TO=$(jq --raw-output .label.description "${{ github.event_path }}")
        if [ "$NAME" == "canary" ]; then
          echo "Triggering a \"$DEPLOY_TO\" was entered"
        fi
