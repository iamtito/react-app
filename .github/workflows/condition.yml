name: condition

on:
  label: 
    types: [created]

  push:
    branches: master
env:
  STATET: "success"
jobs:

  build:
    runs-on: ubuntu-latest
    #if: github.event_name == 'label'
    steps:
#     - name: set environment variables
#       uses: allenevans/set-env@v1.0.0
#       with:
#         overwrite: true
#         STATET: "success"
      
    - name: pretask
      run: |
        echo "na me fvk up."
        
    - name: check pre
      if: success()
      run: |
        echo "it was a success"
        
    - name: frst
      id: tito
      run: |
        echo "how far na"
  
    - name: Checkout code
      uses: actions/checkout@master
    
    - name: Show Popularity
#       if: steps.tito.outputs.status == 'success'
      id: popular
      run: |
        set -exv
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        GIT_TAGS=$(git tag -l --sort=committerdate)  
        TAGS=($GIT_TAGS)
        export COMMIT_HASH=rc-$(git tag -l --sort=committerdate |tail -1 | cut -f2 -d"-")-$(git rev-parse HEAD | cut -c 1-7)
        export STARS=$(jq --raw-output .repository.stargazers "${{ github.event_path }}")
        echo "$STARS and ${{ steps.tito.outputs.status }}"
        export COMMIT=rc-${TAGS[0]}-$(jq --raw-output .head_commit.id "${{ github.event_path }}" | cut -c1-7)
        #export COMMIT_HASHH=$(jq --raw-output .release.target_commitish "${{ github.event_path }}" | cut -c1-7)
        #export STATET=success
        echo "::set-env name=STARS::$STARS"
        echo "::set-env name=COMMIT::$COMMIT"
        echo "::set-env name=COMMIT_HASH::$COMMIT_HASH"
        #echo "::set-env name=STATET::$STATET"
        mkdir variable
        echo $COMMIT_HASH > variables.txt
        echo "success" >> variables.txt
        
    - name: Upload Envvars
      uses: actions/upload-artifact@v1
      with:
        name: envvar
        path: variables.txt
        
    - name: Using Payload To Run a step
      run: |
        echo "this **** $STARS **** was parsed"
        echo "this **** $COMMIT **** was parsed"
        echo "this **** $COMMIT_HASH **** was parsed"
        cat variables.txt
        
#     - name: Create Release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
# #         COMMIT: $COMMIT_HASH
#       with:
#         tag_name: ${{ env.COMMIT_HASH }}
#         release_name: ${{ env.COMMIT_HASH }}
#         body: |
#           Changes in this ${{ env.COMMIT_HASH }}
#           - First Change ${{ env.COMMIT_HASH }}
#         draft: false
#         prerelease: true
#     - name: Suucess Slack Notification
#       if: success()
#       env:
#         STATET: "failed"
#       run: |
#         export STATET=failed
#         echo "::set-env name=STATET::$STATET"
    - name: Suucess Slack Notification
      if: success()
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        STATET: "failure"
# #         curl -s -d "payload={\"channel\": \"D9PGVDWMQ\", \"username\":\"github-actions-alerts\", \"icon_emoji\":\"rocket\", \"attachments\":[{\"color\":\"success\" , \"text\": \"SUCCESS\"}]}" ${{ secrets.SLACK_BOT_TOKEN }}
#       uses: rtCamp/action-slack-notify@master
#       env:
#         SLACK_WEBHOOK: ${{ secrets.SLACK_BOT_TOKEN }}
#         SLACK_CHANNEL: '#github-actions-alerts'
#         SLACK_USERNAME: Test
#         SLACK_ICON: 'https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-12-19/288981919427_f45f04edd92902a96859_192.png'
#         SLACK_MESSAGE: 'SUCCESS'

#     - name: Failure Slack Notification
#       if: failure()
# #       run: |
# #         curl -s -d "payload={\"channel\": \"D9PGVDWMQ\", \"username\":\"github-actions-alerts\", \"icon_emoji\":\"rocket\", \"attachments\":[{\"color\":\"danger\" , \"text\": \"FAILED\"}]}" ${{ secrets.SLACK_BOT_TOKEN }}
#       uses: rtCamp/action-slack-notify@master
#       env:
#         SLACK_WEBHOOK: ${{ secrets.SLACK_BOT_TOKEN }}
#         SLACK_CHANNEL: '#github-actions-alerts'
#         SLACK_USERNAME: Test
#         SLACK_ICON: 'https://slack-files2.s3-us-west-2.amazonaws.com/avatars/2017-12-19/288981919427_f45f04edd92902a96859_192.png'
#         SLACK_COLOR: '#ff6347'
#         SLACK_MESSAGE: 'FAILED'
  middle:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download Envvars
      uses: actions/download-artifact@v1
      with:
        name: envvar
    - shell: bash
      run: |
        sed -i '2s/.*/failed/'  envvar/variables.txt
    - name: Upload math result for job 2
      uses: actions/upload-artifact@v1
      with:
        name: envvar
        path: envvar/variables.txt
  notify:
    needs: [middle]
    runs-on: ubuntu-latest
    if: always()
    steps:
#     - name: check pre suucess
#       env:
#           STATET: ${{ env.STATET }}
#       if: ${{ env.STATET }} == 'success'
#       run: |
#         echo "it was a success ${{ env.STATET }}"
#     - name: check pre failed
#       if: ${{ env.STATET }} == 'failed'
#       run: |
#         echo "it was a falure ${{ env.STATET }}"
#     - name: test
#       env:
#         STATET: ${{ steps.popular.outputs.popular }}
#       run: |
#         echo "we have ${{ env.STATET }} and $STATET and ${{ steps.popular.outputs.popular }}"
    - name: Download Envvars
      uses: actions/download-artifact@v1
      with:
        name: envvar
    - shell: bash
      run: |
        set -exv
        ls
        COMMIT=`sed -n '1p' < envvar/variables.txt`
        STAT=`sed -n '2p' < envvar/variables.txt`
        echo $STAT
        echo "::set-env name=COMMIT_HASH::$COMMIT"
        echo "::set-env name=STAT::$STAT"
    - name: echo eet
      run: |
        echo "the new meow is this duded $COMMIT_HASH and then $STAT"

#   release-c:
#     name: Create Release
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@master

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           tag_name: rc-$COMMIT
#           release_name: rc-$COMMIT
#           body: |
#             Changes in this Release
#             - First Change
#           draft: false
#           prerelease: true
        
