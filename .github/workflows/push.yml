name: Push Workflow

on: 
  push:
    branches: master
#   schedule: 
#     - cron: '*/5 * * * *'
      
  workflow_dispatch:
      inputs:
        deploy:
          description: 'Deploy to all env? Options: all, staging, prod'
          required: true
          default: "all"
        account:
          description: 'Specify which aws account to deploy into. Options: lord, zanki, kepa'
          required: false
          default: ""
        renew:
          description: 'Renew ssl certs only and not deploy? Options: all, tlv, hobo'
          required: false
          default: ""
        test:
          description: 'Run test'
          required: false
        hot:
          description: 'Run hot'
          required: false
        application:
          description: 'Deploy to a target application. Options, all, ms, gs, s. Default: all'
          required: true
          default: 'all'

jobs:
  opt:
    runs-on: ubuntu-latest
    steps:
      - run: echo "set-output name=githash::$(echo ${{ github.sha }} | cut -c 1-7)"
        id: githash
      - name: release note
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ steps.githash.outputs.githash }}
        with:
          tag_name: "rc-${{ env.COMMIT_HASH }}"
          release_name: "rc-${{ env.COMMIT_HASH }}"
          draft: false
          prerelease: true
  tot:
    runs-on: ubuntu-latest
    outputs:
      githas: ${{ steps.githas.outputs.githas }}
    steps:
      - run: echo "::set-output name=githas::$(echo ${{ github.sha }} | cut -c 1-7)"
        id: githas
      - run: echo ${{ toJson(steps.githas.outputs) }}
        continue-on-error: true
      - run: echo ${{ steps.githas.outputs }}
        continue-on-error: true
      - run: echo ${{ steps.githas.outputs.stdout }}
        continue-on-error: true
      - run: echo ${{ steps.githas.outputs.githas }}
  ot:
    runs-on: ubuntu-latest
    outputs:
      githash: ${{ steps.githash.outputs.githash }}
    steps:
      - name: set githash
        run: echo "::set-output name=githash::$(echo ${{ github.sha }} | cut -c 1-7)"
        id: githash
      - name: release candidate status
        run: echo "::set-output name=rc-status::$(echo $(if ($(git cat-file -e rc-${{ github.sha }} 2> /dev/null)); then echo "exist"; else echo "nope"; fi))"
        id: rc-status
      - run: echo "Release candidate Status ${{ steps.githash.outputs.rc-status }}"
      - name: Set the value
        id: r_status
        run: |
            set -exv
            #echo "rc_status=$(if ($(git cat-file -e rc-${{ github.sha }} 2> /dev/null)); then echo "exist"; else echo "nope"; fi)" >> $GITHUB_ENV
            #echo $rc_status
            #export r_status=$(if ($(git cat-file -e rc-${{ github.sha }} 2> /dev/null)); then echo "exist"; else echo "nope"; fi)
            #echo "::set-output name=r_status::$(echo $r_status)"
            echo "::set-output name=r_status::$(echo $(if !($(git cat-file -e rc-${{ github.sha }} 2> /dev/null)); then echo "nope"; fi))"
      - run: echo "release candidate rc-${{ github.sha }} status is ${{ env.rc_status }}"
      - run: echo "Release candidate Status ${{ steps.r_status.outputs.r_status }}"
      - name: release note
        if: steps.r_status.outputs.r_status == 'nope'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "rc-${{ steps.githash.outputs.githash }}"
          release_name: "rc-${{ steps.githash.outputs.githash }}"
          draft: false
          prerelease: true
  jobler:
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ github.event.sender.login }}
      - name: runit
        run: |
          export Actor="${{ github.event.sender.login }}"
          echo "$Actor --"
          echo "${Actor} **"
      - run: echo "${{ toJson(github) }}"
      - run: echo "its me ms"
        if: github.event_name == 'push' || github.event.inputs.application == 'ms' || github.event.inputs.application == 'all'
      - run: echo "its me gs"
        if: github.event_name == 'push' || github.event.inputs.application == 'gs' || github.event.inputs.application == 'all'
      - run: echo "its me crons"
        if: github.event_name == 'push' || github.event.inputs.application == 'crons' || github.event.inputs.application == 'all'

#   test:
#    runs-on: ubuntu-latest
#    continue-on-error: true
#    steps:
#      - name: Get PHP 7.1
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '7.1'
#          tools: composer:v1
    
#      - name: Get Node.js 10.x
#        uses: actions/setup-node@v1
#        with:
#          node-version: '10'
#      - name: Install dependencies
#        uses: php-actions/composer@v2
#      - run: pwd
#   hot:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get PHP 7.1
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: '7.1'
#           tools: composer:v1
    
#       - name: Get Node.js 10.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: '10'
#       - name: Install dependencies
#         uses: php-actions/composer@v2
#       - run: pwd
#       - run: echo "${{github.event.inputs.hot}} == jst like that?"
#         if: github.event.inputs.hot
#         continue-on-error: true
#       - run: echo "${{github.event.inputs.hot}} == True?"
#         if: github.event.inputs.hot == 'True'
#         continue-on-error: true
#       - run: echo "${{github.event.inputs.hot}} == true?"
#         if: github.event.inputs.hot == 'true'
#         continue-on-error: true
#       - run: echo "${{github.event.inputs.hot}} == False?"
#         if: github.event.inputs.hot == 'False'
#         continue-on-error: true
#       - run: echo "${{github.event.inputs.hot}} == false?"
#         if: github.event.inputs.hot == 'false'
#         continue-on-error: true
#   lhci:
#     name: Lighthouse
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2

#       - name: Get PHP 7.1
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: '7.1'
      
#       - name: Get Node.js 10.x
#         uses: actions/setup-node@v1
#         with:
#           node-version: '10'

#       - name: run Lighthouse CI
#         run: |
#           npm install -g @lhci/cli@0.4.x

#           lhci autorun --collect.numberOfRuns=5 --collect.url=https://bvity.com 

#   release-notes:
#     runs-on: 'ubuntu-latest'
#     steps:
#     - uses: actions/checkout@v2
#     - name: Update draft release notes
#       uses: release-drafter/release-drafter@v5
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   thest:
#     runs-on: ubuntu-latest
#     continue-on-error: true
#     steps:
#       - name: Renewal Checker
#         run: |
#           if [ '${{ github.event_name }}' == 'schedule' ] || [ '${{ github.event.inputs.renew }}' == 'all' ] || [ '${{ github.event.inputs.renew }}' == 'plo' ]; then
#             echo "Run"
#           else
#             exit 1
#           fi
#       - name: chck
#         continue-on-error: true
#         run: |
#           set -exv
#           if [ ${{github.event.inputs.test}} ]; then test="dry --reun"; fi
#           echo $test
#   test:
#     runs-on: ubuntu-latest
#     continue-on-error: true
#     steps:
#       - name: Renewal Checker
#         run: |
#           if [[ ${{ github.event_name }} == 'schedule' ]] || [[ ${{ github.event.inputs.renew }} == 'all' ]] || [[ ${{ github.event.inputs.renew }} == 'plo' ]]; then
#             echo "Run"
#           else
#             exit 1
#           fi
#       - name: chck
#         continue-on-error: true
#         run: |
#           set -exv
#           if [ ${{github.event.inputs.test}} ]; then test="dry --reun"; fi
#           echo $test
#       - name: chck2
#         continue-on-error: true
#         run: |
#           set -exv
#           echo ${${{github.event.inputs.test}}:-"lab"}
#       - name: chck3
#         continue-on-error: true
#         run: |
#           set -exv
#           echo ${'${{github.event.inputs.test}}':-'yelp'}
#       - name: chck4
#         continue-on-error: true
#         run: |
#           set -exv
#           echo ${'${{github.event.inputs.test}}':-'lab'}
# #       - name: chck3
# #         continue-on-error: true
# #         run: |
# #           set -exv
# #           ${{github.event.inputs.test:-"nada"}}
#   slobo:
#     runs-on: ubuntu-latest
#     continue-on-error: true
# #     if: github.event.inputs.account == 'all' || (github.event.inputs.deploy == 'all' && github.event.inputs.renew == 'staging')
#     steps:
#       - name: chck
#         run: |
#           set -exv
#           if [[ '${{ github.event.inputs.account }}' == 'all' ]] || [[ '${{ github.event.inputs.deploy }}' == 'all' && '${{ github.event.inputs.renew }}' == 'staging' ]]; then
#             echo "run slo"
#           else
#             echo "exit slo"
#             exit 1
#           fi
#       - name: Renewal Checker
#         run: |
#           echo "hobo"
#           echo ${{ github.event.inputs.deploy }}
#           echo ${{ github.event.inputs.renew }}
#           echo ${{ github.event.inputs.account }}
#   sloboo:
#     continue-on-error: true
#     runs-on: ubuntu-latest
# #     if: github.event.inputs.account == 'all' || (github.event.inputs.deploy == 'all' && github.event.inputs.renew == 'prod')
#     steps:
#       - name: chck
#         run: |
#           set -exv
#           if [[ '${{ github.event.inputs.account }}' == 'all' ]] || [[ '${{ github.event.inputs.deploy }}' == 'all' && '${{ github.event.inputs.renew }}' == 'prod' ]]; then
#             echo "run sloboo"
#           else
#             echo "exit sloboo"
#             exit 1
#           fi
#       - name: Renewal Checker
#         run: |
#           echo "hobo"
#           echo ${{ github.event.inputs.deploy }}
#           echo ${{ github.event.inputs.renew }}
#           echo ${{ github.event.inputs.account }}
          
#   slobee:
#     runs-on: ubuntu-latest
#     needs: [slobo, sloboo]
#     steps:
#       - run: echo "${{ github.event.inputs.deploy }} - ${{ github.event.inputs.renew }} - ${{ github.event.inputs.account }}"
#   first:
#     name: First
#     runs-on: ubuntu-latest
#     steps:
#       - name: yolo
#         run: |
#           exit 0
#       - id: sunny
#         run: echo "sunny"
#         continue-on-error: true
#       - name: Inspect contexts
#         continue-on-error: true
#         run: |
#           set -exv
#           echo "hobo"
          
#   second:
#     name: Second
#     runs-on: ubuntu-latest
#     steps:
#       - name: yolo
#         run: |
#           exit 1
#       - id: sunny
#         run: echo "sunny"
#         continue-on-error: true
#       - name: Inspect contexts
#         continue-on-error: true
#         run: |
#           set -exv
#           echo "hobo"
          
#   sec:
#     name: Sec
#     runs-on: ubuntu-latest
#     steps:
#       - name: Renewal Checker
#         run: |
#           if [ ${{ github.event.inputs.renew }} = 'all' ] || [ ${{ github.event.inputs.renew }} != 'tlv' ]; then
#             exit 1
#           fi
#       - id: sunny
#         run: echo "sunny"
#         continue-on-error: true
#       - name: Inspect contexts
#         continue-on-error: true
#         run: |
#           set -exv
#           echo "hobo"
#       - name: Failed
#         if: failure() && github.event.inputs.renew == 'all' || failure() && github.event.inputs.renew == 'tlv'
#         run: |
#           echo "Dang it it failed"
          
#   stec:
#     name: Stec
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checker
#         run: |
#           if [ ${{ github.event.inputs.renew }} != 'all' ] || [ ${{ github.event.inputs.renew }} != 'tlv' ]; then
#             exit 0
#           fi
#       - id: sunny
#         run: echo "sunny"
#         continue-on-error: true
#       - name: Inspect contexts
#         continue-on-error: true
#         run: |
#           set -exv
#           echo "hobo"
#       - name: Failed
#         if: failure() ||  github.event.inputs.renew == 'all' ||  github.event.inputs.renew == 'tlv'
#         run: |
#           echo "Dang it it failed"
# #   php:
# #     name: php
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v2
# #       - name: php7.1
# #         continue-on-error: true
# #         uses: shivammathur/setup-php@v2
# #         with:
# #           php-version: '7.1'
# #       - run: php --version
# #         continue-on-error: true
# # #       - run: apt install update -y
# # #       - run: apt-get update
# # #         continue-on-error: true
# # #       - run: apt-get install curl -y
# # #         continue-on-error: true
# #       - run: curl -s https://getcomposer.org/installer | php
# #         continue-on-error: true
# # #       - run: mv composer.phar /usr/local/bin/composer
# # #         continue-on-error: true
# #       - run: composer --version
# #         continue-on-error: true
# #       - run: sudo apt install php-bz2 -y
# #         continue-on-error: true
# #       - run: sudo php --ini
# #         continue-on-error: true
# #       - run: $(which composer) install
# #         continue-on-error: true
      
# #   php7-1:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v2
# #       - name: get php 7.1
# #         continue-on-error: true
# #         uses: shivammathur/setup-php@v2
# #         with:
# #           php-version: '7.1'
# # #           tools: composer:v2
# #       - run: php --version
# #         continue-on-error: true
# #       - run: composer --version
# #         continue-on-error: true
# #       - run: sudo php --ini
# #         continue-on-error: true
# #       - run: composer install
# #         continue-on-error: true
# #       - run: npm install
# #         continue-on-error: true
# #       - run: sudo npm install -g bower
# #         continue-on-error: true
# #       - run: sudo npm install -g gulp
# #         continue-on-error: true
# #       - run: npm --version
# #         continue-on-error: true
# #       - run: node --version
# #         continue-on-error: true
# #       - run: bower version
# #         continue-on-error: true
# #       - run: which bower
# #         continue-on-error: true
# #       - run: $(which bower) version
# #         continue-on-error: true
# #       - run: sudo $(which bower) version
# #         continue-on-error: true
# #       - run: gulp version
# #         continue-on-error: true
# #       - run: which gulp
# #         continue-on-error: true
# #       - run: $(which gulp) version
# #         continue-on-error: true
# #       - run: sudo $(which gulp) version
# #         continue-on-error: true
        
# #   php71:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - uses: actions/checkout@v2
# #       - name: get php 7.1
# #         continue-on-error: true
# #         uses: shivammathur/setup-php@v2
# #         with:
# #           php-version: '7.1'
# #           tools: composer:v2
# #       - run: php --version
# #         continue-on-error: true
# #       - run: composer --version
# #         continue-on-error: true
# #       - run: sudo apt install php-bz2 -y
# #         continue-on-error: true
# #       - run: sudo php --ini
# #         continue-on-error: true
# # #       - name: Run composer
# # #         continue-on-error: true
# # #         uses: php-actions/composer@v2
# #       - run: npm install
# #         continue-on-error: true
# #       - run: sudo npm i bower
# #         continue-on-error: true
# #       - run: npm --version
# #         continue-on-error: true
# #       - run: bower version
# #         continue-on-error: true
# #       - run: which bower
# #         continue-on-error: true
# #       - run: $(which bower) version
# #         continue-on-error: true
# #       - run: sudo $(which bower) version
# #         continue-on-error: true
